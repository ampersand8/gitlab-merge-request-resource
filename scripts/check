#!/bin/bash
# vim: set ft=sh

set -e -u -x

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

TMPDIR=${TMPDIR:-/tmp}

payload="$(mktemp "${TMPDIR}/gitlab-merge-request-resource.XXXXXX")"

cat > "${payload}" <&0

gitlab_host="$(jq -r '.source.gitlab_host // ""' < "${payload}")"
private_token="$(jq -r '.source.private_token // ""' < "${payload}")"
project_path="$(jq -r '.source.project_path // ""' < "${payload}")"
username="$(jq -r '.source.username // ""' < "${payload}")"
password="$(jq -r '.source.password // ""' < "${payload}")"
version_sha="$(jq -r '.version.sha // ""' < "${payload}")"

uri="https://${username}:${password}@${gitlab_host}/${project_path}.git"

[ -d /tmp/repo ] || git clone "${uri}" /tmp/repo
cd /tmp/repo
git pull

version_updated_at=0
if [ ! -z "${version_sha}" ]; then
  version_updated_at="$(git show -s --format=%ct "${version_sha}")"
fi

project_path_encoded="${project_path//'/'/'%2F'}" # url encode "/"

open_mrs="$(curl \
--header "PRIVATE-TOKEN: ${private_token}" \
"https://${gitlab_host}/api/v3/projects/${project_path_encoded}/merge_requests?state=opened&order_by=updated_at")"

num_mrs="$(echo "${open_mrs}" | jq 'length')"

new_versions=''

for i in $(seq 0 $((num_mrs - 1))); do
  mr="$(echo "${open_mrs}" | jq -r '.['"$i"']')"
  mr_sha="$(echo "${mr}" | jq -r '.sha')"
  mr_updated_at="$(git show -s --format=%ct "${mr_sha}")"

  if [ "${mr_updated_at}" -gt "${version_updated_at}" ] || [ -z "${version_sha}" ]; then
      new_versions="${new_versions},{\"sha\":\"${mr_sha}\"}"
  fi
done

new_versions="${new_versions#','}" # remove trailing comma
new_versions="[${new_versions}]" # make JSON array

if [ "${new_versions}" == '[]' ] && ! [ -z "${version_sha}" ]; then
  new_versions="[{\"sha\":\"${version_sha}\"}]"
fi

jq -n "${new_versions}" >&3
